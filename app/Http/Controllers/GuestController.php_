<?php

namespace App\Http\Controllers;

use App\Appointments;
use App\CarMake;
use App\CarModel;
use App\EmailSettings;
use App\PaymentResponse;
use App\Region;
use App\Search;
use App\ServiceRegions;
use App\Settings;
use App\State;
use App\TestPackage;
use App\User;
use App\Wallet;
use App\WorkingTime;
use Carbon\Carbon;
use Faker\Provider\ar_SA\Payment;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use Illuminate\Http\Request;
use App\Traits\AppTraits;
use Illuminate\Support\Facades\Http;

class GuestController extends Controller
{

    function get_model(){


        $makes = [

            "Abarth",
            "AC",
            "Alfa Romeo",
            "Allard",
            "Alpina",
            "Alpine",
            "Alpine-Renault",
            "Alvis",
            "AM General",
            "Ariel",
            "Armstrong Siddeley",
            "Asia Motors",
            "Aston Martin",
            "Auburn",
            "Audi",
            "Austin",
            "Austin Healey",
            "Bedford",
            "Bentley",
            "Berkeley",
            "Bertone",
            "BMW",
            "Bolwell",
            "Bond",
            "Bristol",
            "Bufori",
            "Buick",
            "Bullet",
            "Cadillac",
            "Caterham",
            "Chery",
            "Chevrolet",
            "Chrysler",
            "Citroen",
            "Clenet",
            "Commer",
            "CSV",
            "Custom",
            "Daewoo",
            "Daihatsu",
            "Daimler",
            "Datsun",
            "DeLorean",
            "DeSoto",
            "De Tomaso",
            "DKW",
            "Dodge",
            "Durant",
            "Elfin",
            "Eunos",
            "Ferrari",
            "Fiat",
            "Ford",
            "Ford Performance Vehicles",
            "Foton",
            "FSM",
            "Fulda",
            "Fuso",
            "Galloway",
            "Geely",
            "Genesis",
            "GMC",
            "Goggomobil",
            "Goliath",
            "Graham",
            "Graham-Paige",
            "Great Wall",
            "Haval",
            "HDT",
            "Higer",
            "Hillman",
            "Hino",
            "Holden",
            "Holden Special Vehicles",
            "Honda",
            "Hudson",
            "Humber",
            "Hummer",
            "Hupmobile",
            "Hyundai",
            "Infiniti",
            "INFINITI",
            "International",
            "ISO",
            "Isuzu",
            "Iveco",
            "JAC",
            "Jaguar",
            "JBA",
            "Jeep",
            "Jensen",
            "JMC",
            "Kia",
            "Koenigsegg",
            "KTM",
            "Lada",
            "Lamborghini",
            "Lancia",
            "Land Rover",
            "LDV",
            "Lexus",
            "Leyland",
            "Lincoln",
            "London Taxi Company",
            "Lotus",
            "Mack",
            "Mahindra",
            "Marathon",
            "Marcos",
            "Maserati",
            "Matra",
            "Maybach",
            "Mazda",
            "McLaren",
            "Mercedes-Benz",
            "Mercury",
            "MG",
            "MINI",
            "Mitsubishi",
            "Morgan",
            "Morris",
            "Moskvich",
            "Napier",
            "Nash",
            "Nissan",
            "NSU",
            "Oldsmobile",
            "Opel",
            "Packard",
            "Panther",
            "Peugeot",
            "Plymouth",
            "Pontiac",
            "Porsche",
            "Prince",
            "Proton",
            "Purvis",
            "RAM",
            "Rambler",
            "Reliant",
            "Renault",
            "REO",
            "Riley",
            "Robnell",
            "Rolls-Royce",
            "Rover",
            "Saab",
            "Seat",
            "Singer",
            "SKODA",
            "smart",
            "SS",
            "SsangYong",
            "Standard",
            "Steyr-Puch",
            "Studebaker",
            "Stutz",
            "Subaru",
            "Sunbeam",
            "Suzuki",
            "Talbot",
            "Tata",
            "TD 2000",
            "Tesla",
            "Toyota",
            "TRD",
            "Triumph",
            "TVR",
            "U.D.",
            "Ultima",
            "Vanden Plas",
            "Vauxhall",
            "Volkswagen",
            "Volvo",
            "Westfield",
            "Willys",
            "Wolseley",
            "Yutong",
            "ZX Auto",
        ];


        try {


            foreach ($makes as $make) {

                $data = file_get_contents('https://www.ezlicence.com.au/instructor/car_model_query?car_make=' . urlencode($make));
                $result = json_decode($data);

                if (is_object($result)) {

                    $mk = new CarMake();

                    echo $mk->title = $make;

                    if ($mk->save()) {

                        echo $make_id = $mk->id;

                        foreach ($result->result as $res) {
                            $car_model = new CarModel();
                            $car_model->make_id = $make_id;
                            $car_model->title = $res;
                            $car_model->save();
                        }
                    }
                }
            }
        }catch (\Exception $e){
            echo $e->getMessage(). $e->getLine();
        }
    }

    function index($search_id=false){
        //IN CASE OF SEARCH
        $search = $region= false;
        if($search_id!=false){
            $search = Search::whereId($search_id)->first();
            if(!$search){
                $search_id = false;
            }else{
                $region = Region::whereId($search->region_id)->first();
            }
        }
        return view('welcome', compact('region','search_id', 'search'));
    }

    function autocomplete_regions_ajax(Request $request){

        $data = [];

        if($request->has('q')){
            $search = $request->q;
            $data =Region::select("id","title")
                ->where('title','LIKE',"%$search%")
                ->get();
        }
        return response()->json($data);
    }

    function search(Request $request){
    echo "<pre>";print_r($request->all());die();
        if($request->search_type == 1){
            $ip = $request->getClientIp();
            $t_type = $request->type;
            $region = Region::select('title', 'id')->whereId($request->region)->first();
            if($region) {
                $available_users_r = ServiceRegions::where('region_id', $request->region)->pluck('user_id');
                if(count($available_users_r)>0) {
                    $users = User::join('user_meta', 'user_meta.user_id', '=', 'users.id')
                        ->select('users.id', 'user_meta.language', 'users.name', 'users.lname', 'users.avatar')
                        ->whereIn('users.id', $available_users_r)
                        ->whereRaw("user_meta.transmission_type = 'both' OR user_meta.transmission_type = '$t_type'");
                    $users = $users->get();
                    $total = $users->count();

                    /*save search*/
                    $search =  Search::create(
                        ['ip' => $ip, 't_type' => $t_type, 'region_id' => $request->region]
                    );
                    $search_id = $search->id;

                    $view = view('search.search', compact('users', 'search_id'))->render();

                    return response()->json(['success' => true, 'view' => $view, 'total' => $total, 'title' => $region->title, 'search_id' => $search_id]);
                }else{
                    return response()->json(['success' => false, 'message' => 'Result not found!']);

                }
            }else{
                return response()->json(['success' => false, 'message' => 'Result not found!']);
            }
        }elseif ($request->search_type == 2){
            /*course selection*/
            /*save search*/
            $search_data = json_encode($request->lesson);
            $search =  Search::where('id', $request->search_id)->update(
                ['step_2' => $search_data, 'instructor_id' => $request->instructor_id]
            );
            if($search){
                return response()->json(['success' => true]);
            }
        }elseif ($request->search_type == 3){
            /*course selection*/
            /*save search*/
            $search_data = [ "total" => $request->total, 'discount' => $request->dis, 'hour' => $request->hr ];

            $search =  Search::where('id', $request->search_id)->update(
                ['step_3' => $search_data]
            );

            if($search){
                return response()->json(['success' => true]);
            }
        }elseif ($request->search_type == 4){
            /*save search*/
            $data = [
                'time_slot' => $request->time_slot,
                'schedule_date' => $request->schedule_date
            ];
            $search =  Search::where('id', $request->search_id)->update(
                ['step_4' => $data]
            );

            if($search){
                return response()->json(['success' => true]);
            }
        }
    }

    function instructor_profile($search_id, $instructor_id){

        $instructor = User::whereId($instructor_id)->where('type', 'inst')->first();
        if(!$instructor){
            return back()->with('error', 'Please make a new search');
        }
        $search = Search::find($search_id);
        if(!$search){
            return back()->with('error', 'Please make a new search');
        }

        /*instructors*/
        $t_type = $search->t_type;
        $users=[];
        $available_users_r = ServiceRegions::where('region_id', $search->region_id)->pluck('user_id');
        if(count($available_users_r)>0) {
            $users = User::join('user_meta', 'user_meta.user_id', '=', 'users.id')
                ->select('users.id', 'user_meta.language', 'users.name', 'users.lname', 'users.avatar')
                ->whereIn('users.id', $available_users_r)
                ->whereRaw("user_meta.transmission_type = 'both' OR user_meta.transmission_type = '$t_type'");
            $users = $users->get();
            $total = $users->count();

        }

        return view('search.profile', compact('instructor', 'search', 'users', 'total', 'search_id'));
    }

    function book_online($search_id, $instructor_id){

        $instructor = User::whereId($instructor_id)->where('type', 'inst')->first();
        if(!$instructor){
            return back()->with('error', 'Please make a new search');
        }
        $search = Search::find($search_id);
        if(!$search){
            return back()->with('error', 'Please make a new search');
        }
        if($this->check_search_status($search_id)){
            return redirect('/')->with('error', 'Please make a new search');
        }
        return view('search.book_online', compact('instructor', 'search', 'search_id'));
    }

    function book_online_cart($search_id, $instructor_id){
        $instructor = User::whereId($instructor_id)->where('type', 'inst')->first();
        if(!$instructor){
            return back()->with('error', 'Please make a new search');
        }
        $search = Search::find($search_id);
        if(!$search){
            return back()->with('error', 'Please make a new search');
        }
        if($this->check_search_status($search_id)){
            return redirect('/')->with('error', 'Please make a new search');
        }

        $test_package = TestPackage::where('status', 1)->first();
        $region = Region::find($search->region_id);
        return view('search.cart', compact('instructor', 'search', 'search_id', 'region', 'test_package'));
    }

    function book_online_book($search_id, $instructor_id){

        $instructor = User::whereId($instructor_id)->where('type', 'inst')->first();
        if(!$instructor){
            return back()->with('error', 'Please make a new search');
        }
        $search = Search::find($search_id);
        if(!$search){
            return back()->with('error', 'Please make a new search');
        }
        if($this->check_search_status($search_id)){
            return redirect('/')->with('error', 'Please make a new search');
        }

        $test_package = TestPackage::where('status', 1)->first();

        $region = Region::find($search->region_id);
        $user_working_time = WorkingTime::where('user_id', $instructor_id)->get();
        return view('search.book', compact('user_working_time','instructor', 'search', 'search_id', 'region', 'test_package'));
    }

    function get_slots(Request $request)    {

        $start_date = $request->start_date;
        $day = Carbon::parse($start_date)->format('l');

        $get_times = WorkingTime::where(['user_id' => $request->instructor_id, 'is_enabled' => 'yes', 'day' => $day])->first();

        if($get_times){

            /*appointment settings*/
            $time_interval = 60;
            $av_time = json_decode($get_times->data);

            /*get appointments of selected date*/
            $boobkly_appts = Appointments::where('instructor_id',$request->instructor_id)
                ->where('status', '!=', 'cancelled' )
                ->whereDate('schedule_date', $start_date)
                ->pluck('time_slot')
                ->toArray();


            if(is_array($av_time)){
                $html = "";
                $avail_times=[];

                $slots=[];
                foreach ($av_time as $v){

                    $business_from_time = $v->start_hour.':'. $v->start_min;
                    $business_to_time   = $v->end_hour.':'. $v->end_min;
                    $start_time = $start_date. ' '.$business_from_time;

                    $s_time = strtotime($business_from_time);
                    $e_time = strtotime($business_to_time);

                    $dif      =  $e_time - $s_time;
                    $hour     =  date('H', $dif);
                    $minutes  =  date('i', $dif);

                    $total_minutes = $hour*60;
                    $total_minutes = $total_minutes+$minutes;

                    $start_slot = Carbon::parse($start_time);

                    $loop_length = floor($total_minutes/$time_interval)+1;

                    $index=0;
                    for ( $i=1; $i <= $loop_length; $i++ ) {

                        if ($i == '1') {
                            $slot = $start_slot;
                        } else {
                            $slot = $start_slot->addMinutes($time_interval);
                        }
                        $slot = $slot->format('g:i A');
                        $slots[] = $slot;

                    }
                }
            }

            foreach ($slots as $i => $slot){

                if(in_array( $slot, $boobkly_appts )){
                    $html .= '<div class="btn-switch btn-switch-custom disable" role="tooltip" data-toggle="tooltip" data-title="Booked">
                                <label for="input-btn-switch-custom' . $i . '" class="btn btn-rounded btn-custom disable_slot btn-sm waves-effect waves-light">
                                    <em class="fa fa-check"></em>
                                    <strong>' . $slot . '</strong>
                                </label>
                             </div>';
                }else{
                    $html .= '<div class="btn-switch btn-switch-custom " role="tooltip">';
                    $html .= '<input form="book_time" type="radio" name="time_slot" value="' . $slot . '" id="input-btn-switch-custom' . $i . '"/>';
                    $html .= '<label for="input-btn-switch-custom' . $i . '" class="btn btn-rounded btn-custom enable_slot btn-sm waves-effect waves-light">
                                    <em class="fa fa-check"></em>
                                    <strong>' . $slot . '</strong>
                                </label>
                             </div>';
                }
            }

            return response()->json( [ 'html' => $html ] );
        }
    }

    function learner_register($search_id){

        $search = Search::find($search_id);
        if(!$search){
            return back()->with('error', 'Please make a new search');
        }

        $instructor = User::whereId($search->instructor_id)->where('type', 'inst')->first();
        $test_package = TestPackage::where('status', 1)->first();
        $regions = Region::where('status', 1)->get();

        $user = false;
        if( Auth::check() ){
            $user = User::find(auth()->user()->id);
        }

        return view('learner.register', compact('regions','user','instructor', 'search', 'search_id', 'test_package'));
    }

    function register_learner(Request $request){

        try {

            $rules = [
                'name'              => ['required', 'string', 'max:255'],
                'last_name'         => ['required', 'string', 'max:255'],
                'phone'             => ['required', 'string', 'max:12', 'min:10'],
                'address'           => ['required'],
                //'suburb'            => ['required'],
                'year'              => ['required'],
                'day'               => ['required'],
                'month'             => ['required'],
                'g-recaptcha-response' => 'required|captcha',
            ];

            if( auth()->guest() ){
                $user_id = false;
                unset($rules['email']);
                $rules= array_merge($rules, [
                    'email'             => 'required|email|unique:users,email,'.$user_id,
                    'phone'             => ['required', 'string', 'max:12', 'min:10'],
                    'password'          => ['required', 'min:6', 'required_with:confirm_password', 'same:confirm_password'],
                    'confirm_password'  => ['required', 'min:6'],
                ]);

            }else{

                if(auth()->user()->type !='learner'){
                    return response()->json(['success' => false, 'message' => "You haven't permission to proceed!" ]);
                }

                unset($rules['email']);
                $user_id = auth()->user()->id;

            }

            $validator = Validator::make($request->all(), $rules,
            [
                'year.required' => 'please select year of birthday.',
                'day.required' => 'please select day of birthday.',
                'month.required' => 'please select month of birthday.',
                'g-recaptcha-response.required' => 'Captcha is required.',
            ]
            );

            if ($validator->fails()) {
                $err = $validator->errors();
                return response()->json(['error' => true, 'message' => $err]);
            }else {

                $user = new User();

                if ($request->user_id != '') {
                    $user = $user->findOrFail($request->user_id);
                }

                $user->fill($request->except(['password']));

                if(auth()->guest()){
                    $user->password = Hash::make($request->password);
                }

                $user->dob = $request->year . '-' . $request->month . '-' . $request->day;
                $user->lname = $request->last_name;

                if ($user->save()) {

                    if(auth()->guest()) {

                        //$request->user()->sendEmailVerificationNotification();
                        Auth::loginUsingId($user->id);
                    }

                    $user_date = [
                        'learner_id' => $user->id,
                        'address' => $request->address,
                        'address_detail' => $request->address_detail,
                    ];
                    /*save search*/
                    Search::where('id', $request->search_id)->update(
                        ['step_5' => $user_date, 'learner_id' => $user->id]
                    );

                    return response()->json(['success' => true]);
                }
            }
        }catch (\Exception $e){
            return response()->json(['success' => false, 'message' => 'something went wrong! '. $e->getMessage().$e->getLine()]);
        }
    }

    function learner_payment($search_id){

        if(auth()->guest()) {
            return back()->with('error', 'Please make a new search')->with('error', 'invalid request');
        }

        $search = Search::where('id',$search_id)->where('learner_id', auth()->user()->id)->first();
        if(!$search){
            return back()->with('error', 'Please make a new search');
        }
        $instructor = User::whereId($search->instructor_id)->where('type', 'inst')->first();
        $test_package = TestPackage::where('status', 1)->first();
        $regions = Region::where('status', 1)->get();

        $user = false;
        if( Auth::check() ){
            $user = User::find(auth()->user()->id);
        }

        return view('learner.payment', compact('test_package', 'regions','user','instructor', 'search', 'search_id'));
    }

    public function strip_payment(Request $request)
    {

        try{

            $user_id = auth()->user()->id;
            $status = false;

            if(isset($request->stripeToken)) {
                $stripeToken = $request->stripeToken;
            } else {
                die("Request Failed!");
            }

            /*update address*/
            $user_date = [
                'learner_id' => $user_id,
                'address' => $request->address,
                'address_detail' => $request->address_detail,
            ];
            /*save search*/
            Search::where('id', $request->search_id)->update(
                ['step_5' => $user_date, 'learner_id' => $user_id]
            );

            $stripe_key = env('STRIPE_SECRET_KEY');

            if($stripe_key!=''){

                $search = Search::whereId($request->search_id)->first();
                if($search) {

                    $t_amount = $search->step_3;
                    $t_amount = json_decode($t_amount);
                    $amount = $t_amount->total;

                    $step_5 = $search->step_5;
                    $step_5 = json_decode($step_5);

                    /*get schedule*/
                    $schedule_date = $time_slot = '';
                    $sch = $search->step_4;
                    $sch = json_decode($sch);
                    if (isset($sch->schedule_date)) {
                        $schedule_date = $sch->schedule_date;
                    }
                    if (isset($sch->time_slot)) {
                        $time_slot = $sch->time_slot;
                    }

                    if (is_numeric($amount)) {

                        /*store appointments*/
                        $appointmetObj = new Appointments();
                        $appointmetObj->user_id = $user_id;
                        $appointmetObj->schedule_date = $schedule_date;
                        $appointmetObj->time_slot = $time_slot;
                        $appointmetObj->status = "unconfirmed";
                        $appointmetObj->instructor_id = $search->instructor_id;
                        $appointmetObj->payment_status = 0;
                        $appointmetObj->search_id = $search->id;

                        if ($appointmetObj->save()) {

                            \Stripe\Stripe::setApiKey($stripe_key); // this is Secret key

                            $total_amount = $amount * 100;

                            $charge = \Stripe\Charge::create([
                                'amount' => $total_amount,
                                'currency' => 'usd',
                                'source' => $stripeToken,
                                'description' => 'appointment for instructor ='. $search->instructor_id.' from user ='. $user_id . ' appointment id =' . $appointmetObj->id,
                            ]);

                            if ($charge['paid'] == 1) {

                                $status = true;
                                $appointmetObj->update(['payment_status' => 1]);
                                $converted = $charge['amount'] / 100;

                                $payment_response = new PaymentResponse();
                                $payment_response->charge_id = $charge['id'];
                                $payment_response->balance_transaction_id = $charge['balance_transaction'];
                                $payment_response->amount = $charge['amount'];
                                $payment_response->converted_amount = $converted;
                                $payment_response->currency = $charge['currency'];
                                $payment_response->created = $charge['created'];
                                $payment_response->status = $charge['status'];
                                $payment_response->method = "Stripe";
                                $payment_response->appointment_id = $appointmetObj->id;
                                $payment_response->response = json_encode($charge);
                                $payment_response->user_id = \auth()->user()->id;
                                if($payment_response->save()){
                                    /*send email to instructor*/

                                    $instructor = User::where('id', $search->instructor_id)->first();
                                    if($instructor) {

                                        /* Wallet For Admin and Instructor User */

                                        $GetAdminRecord       =      User::where('type', 'admin')->first();
                                        $AdminCommission      =      5;
                                        $calculated           =      ($amount * $AdminCommission) / 100;
                                        $ToInstructor         =      $amount - $calculated;
                                        $ToAdmin              =      $calculated;

                                        /* Admin Wallet */

                                        $GetAdminBalance      =      Wallet::where('user_id', $GetAdminRecord->id)->first();
                                        if($GetAdminBalance)
                                        {
                                            $UpdateBalance    =      $GetAdminBalance->withdrawable + $ToAdmin;
                                            Wallet::updateOrCreate(
                                                ['user_id'         =>     $GetAdminRecord->id],
                                                [
                                                    'user_id'      =>     $GetAdminRecord->id,
                                                    'withdrawable' =>     $UpdateBalance,
                                                ]);
                                        }
                                        else
                                        {
                                            Wallet::updateOrCreate(
                                                ['user_id'         =>     $GetAdminRecord->id],
                                                [
                                                    'user_id'      =>     $GetAdminRecord->id,
                                                    'withdrawable' =>     $ToAdmin,
                                                ]);
                                        }

                                        /* Instructor Wallet */

                                        $GetInstructorBalance      =      Wallet::where('user_id', $search->instructor_id)->first();
                                        if($GetInstructorBalance)
                                        {
                                            $UpdateBalance         =      $GetInstructorBalance->withdrawable + $ToInstructor;
                                            Wallet::updateOrCreate(
                                                ['user_id'         =>     $search->instructor_id],
                                                [
                                                    'user_id'      =>     $search->instructor_id,
                                                    'withdrawable' =>     $UpdateBalance,
                                                ]);
                                        }
                                        else
                                        {
                                            Wallet::updateOrCreate(
                                                ['user_id'         =>     $search->instructor_id],
                                                [
                                                    'user_id'      =>     $search->instructor_id,
                                                    'withdrawable' =>     $ToInstructor,
                                                ]);
                                        }

                                        $email_settings = EmailSettings::find(1);
                                        $settings = Settings::find(1);
                                        /*email to instructor about appointment*/
                                        $s = array('%FIRST_NAME%', '%LAST_NAME%', '%EMAIL%', '%PHONE%', '%ADDRESS%', '%APPOINTMENT_DATE%');
                                        $r = array($instructor->name, $instructor->lname, $instructor->email, $instructor->phone, $step_5->address, $schedule_date);
                                        $email_body = str_replace($s, $r, $email_settings->appt_body);
                                        if ($settings->email_type == 'api') {
                                            if ($settings->email_api == 'send_grid') {
                                                // sending email to super admin
                                                AppTraits::SendgridEmail($email_body, $instructor->email, $email_settings->appt_subject, 'FirstPass', $instructor->name, $settings->sg_email, $settings->sg_apikey);
                                            }
                                        } else {
                                            AppTraits::SmtpEmail($email_body, $instructor->email, $email_settings->appt_subject, $settings->smtp_from_name, "Super Admin", $settings->smtp_username, $settings->smtp_password, $settings->smtp_host, $settings->smtp_post, $settings->smtp_femail, $settings->use_ssl, null);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            if($status == true){
                return response()->json(['success' => true, 'message' => 'Payment Done Successfully !!!'], 200);
            }else{
                return response()->json(['success' => false, 'message' => 'Something Went Wrong with payment process !!']);
            }

        }catch (\Exception $e) {
            $message = $e->getMessage();
            return response()->json(['success' => false, 'message' => $message]);

        }
    }

    function check_search_status($search_id){
        if( Appointments::where('search_id', $search_id)->exists() ){
            return true;
        }
        return false;
    }

    function load_events(Request $request){

        if($request->type == 'check_availability'){
            $appointments = Appointments::where('instructor_id', $request->id)
                ->select('id', 'schedule_date', 'time_slot')
                ->where('status', '!=', 'cancelled')
                ->where('time_slot', '!=', '')
                ->whereDate('schedule_date','>=', Carbon::now()->format('Y-m-d'))
                ->get();

            $events=[];
            foreach ($appointments as $appointment){

                $date = Carbon::parse($appointment->schedule_date . ' ' . $appointment->time_slot);
                $start = $date->format('Y-m-d H:i');
                $end = $date->addHours(1)->format('Y-m-d H:i');

                $events[] = [
                    "groupId" => "testGroupId",
                    "start" => $start,
                    "end" => $end,
                    "rendering" => "background",
                    "color" => "#000000",
                ];
            }

            return response()->json($events);
        }
    }

}
